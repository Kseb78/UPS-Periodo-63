package ec.edu.ups.poo.ficheropoo.ventana;

import ec.edu.ups.poo.ficheropoo.clases.FileControlador;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class VentanaPrincipal extends javax.swing.JFrame {

    private FileControlador fileControlador;
    
    DefaultListModel modelo = new DefaultListModel();
    
    public VentanaPrincipal() {
        initComponents();
        fileControlador = new FileControlador();
        listaDatos.setModel(modelo);
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/iconoExplorador.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRuta = new javax.swing.JLabel();
        txtRuta = new javax.swing.JTextField();
        BtnListarDirectorios = new javax.swing.JButton();
        btnListarArchivosOcultos = new javax.swing.JButton();
        btnListarDirectioriosOcultos = new javax.swing.JButton();
        btnListarArchivos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDatos = new javax.swing.JList<>();
        btnMostrarInformacion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaInformacion = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        menuGestor = new javax.swing.JMenu();
        opcionMenuCrear = new javax.swing.JMenuItem();
        opcionMenuRenombrar = new javax.swing.JMenuItem();
        opcionMenuEliminar = new javax.swing.JMenuItem();
        opcionMenuSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblRuta.setFont(new java.awt.Font("Gill Sans MT", 1, 12)); // NOI18N
        lblRuta.setText("Ruta");

        txtRuta.setFont(new java.awt.Font("Gill Sans MT", 0, 12)); // NOI18N
        txtRuta.setToolTipText("Ingrese una ruta Absoluta");

        BtnListarDirectorios.setFont(new java.awt.Font("Gill Sans MT", 0, 12)); // NOI18N
        BtnListarDirectorios.setText("Listar Directorios");
        BtnListarDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnListarDirectoriosActionPerformed(evt);
            }
        });

        btnListarArchivosOcultos.setFont(new java.awt.Font("Gill Sans MT", 0, 12)); // NOI18N
        btnListarArchivosOcultos.setText("Listar Archivos Ocultos");
        btnListarArchivosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosOcultosActionPerformed(evt);
            }
        });

        btnListarDirectioriosOcultos.setFont(new java.awt.Font("Gill Sans MT", 0, 12)); // NOI18N
        btnListarDirectioriosOcultos.setText("Listar Directorios Ocultos");
        btnListarDirectioriosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirectioriosOcultosActionPerformed(evt);
            }
        });

        btnListarArchivos.setFont(new java.awt.Font("Gill Sans MT", 0, 12)); // NOI18N
        btnListarArchivos.setText("Listar Archivos");
        btnListarArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosActionPerformed(evt);
            }
        });

        listaDatos.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        listaDatos.setFont(new java.awt.Font("Gill Sans MT", 0, 13)); // NOI18N
        jScrollPane1.setViewportView(listaDatos);

        btnMostrarInformacion.setFont(new java.awt.Font("Gill Sans MT", 0, 12)); // NOI18N
        btnMostrarInformacion.setText("Mostrar Informacion");
        btnMostrarInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarInformacionActionPerformed(evt);
            }
        });

        txtAreaInformacion.setEditable(false);
        txtAreaInformacion.setColumns(20);
        txtAreaInformacion.setFont(new java.awt.Font("Gill Sans MT", 0, 13)); // NOI18N
        txtAreaInformacion.setRows(5);
        txtAreaInformacion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jScrollPane2.setViewportView(txtAreaInformacion);

        menuGestor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconoMenu.png"))); // NOI18N
        menuGestor.setMnemonic('f');
        menuGestor.setText("GestionarDirectorio");

        opcionMenuCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconoCrear.png"))); // NOI18N
        opcionMenuCrear.setMnemonic('o');
        opcionMenuCrear.setText("Crear");
        opcionMenuCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionMenuCrearActionPerformed(evt);
            }
        });
        menuGestor.add(opcionMenuCrear);

        opcionMenuRenombrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconoEditar.png"))); // NOI18N
        opcionMenuRenombrar.setMnemonic('a');
        opcionMenuRenombrar.setText("Renombrar");
        opcionMenuRenombrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionMenuRenombrarActionPerformed(evt);
            }
        });
        menuGestor.add(opcionMenuRenombrar);

        opcionMenuEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconoEliminar.png"))); // NOI18N
        opcionMenuEliminar.setMnemonic('s');
        opcionMenuEliminar.setText("Eliminar");
        opcionMenuEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionMenuEliminarActionPerformed(evt);
            }
        });
        menuGestor.add(opcionMenuEliminar);

        opcionMenuSalir.setMnemonic('x');
        opcionMenuSalir.setText("Salir");
        opcionMenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionMenuSalirActionPerformed(evt);
            }
        });
        menuGestor.add(opcionMenuSalir);

        menuBar.add(menuGestor);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(btnMostrarInformacion))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblRuta)
                                    .addComponent(BtnListarDirectorios))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnListarArchivos)
                                        .addGap(30, 30, 30)
                                        .addComponent(btnListarDirectioriosOcultos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnListarArchivosOcultos))
                                    .addComponent(txtRuta))))
                        .addGap(0, 198, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRuta))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListarDirectioriosOcultos)
                    .addComponent(btnListarArchivosOcultos)
                    .addComponent(BtnListarDirectorios)
                    .addComponent(btnListarArchivos))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMostrarInformacion)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opcionMenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionMenuSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_opcionMenuSalirActionPerformed

    private void btnMostrarInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarInformacionActionPerformed
        if(listaDatos.getSelectedValue()!=null)
        {
            String ruta = txtRuta.getText();
            String rutaArchivo = ruta+"/"+listaDatos.getSelectedValue();
            ArrayList<String> informacion = fileControlador.mostrarInformacion(rutaArchivo);
            if(informacion==null)
                JOptionPane.showMessageDialog(this, "Excepcion (java.lang.NullPointerException)","Alerta",JOptionPane.ERROR_MESSAGE);
            else
            {
                limpiarInformacion();
                for(int i = 0;i<informacion.size();i++)
                {
                    txtAreaInformacion.append(informacion.get(i)+"\n");
                }                
            }
        }else
        {
            JOptionPane.showMessageDialog(this, "No ha seleccionado ningun elemento","Alerta",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnMostrarInformacionActionPerformed

    private void BtnListarDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnListarDirectoriosActionPerformed
        if (txtRuta.getText().isBlank())
        {
            JOptionPane.showMessageDialog(this, "No ha ingresado una ruta","Alerta",JOptionPane.WARNING_MESSAGE);
        }else
        {
            limpiarInformacion();
            String ruta = txtRuta.getText();
            if(fileControlador.listarDirectorios(ruta)==null)
            {
                JOptionPane.showMessageDialog(this, "No se ha ingresado una ruta valida","Alerta",JOptionPane.WARNING_MESSAGE);
                limpiarRuta();
                
            }else
            {
                ArrayList<String> directorios = fileControlador.listarDirectorios(ruta);
                if(directorios.isEmpty())
                    JOptionPane.showMessageDialog(this, "No se encontro ningun directorio","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                else if(directorios==null)
                    JOptionPane.showMessageDialog(this, "Excepcion (java.lang.NullPointerException)","Alerta",JOptionPane.ERROR_MESSAGE);
                else
                {   
                    modelo.removeAllElements();
                    for(int i = 0; i<directorios.size();i++)
                    {
                        modelo.addElement(directorios.get(i));
                    }                    
                }             
 
            }        
        }
    }//GEN-LAST:event_BtnListarDirectoriosActionPerformed

    private void btnListarArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosActionPerformed
        if (txtRuta.getText().isBlank())
        {
            JOptionPane.showMessageDialog(this, "No ha ingresado una ruta","Alerta",JOptionPane.WARNING_MESSAGE);
        }else
        {
            limpiarInformacion();
            String ruta = txtRuta.getText();
            if(fileControlador.listarArchivos(ruta)==null)
            {
                JOptionPane.showMessageDialog(this, "No se ha ingresado una ruta valida","Alerta",JOptionPane.WARNING_MESSAGE);
                limpiarRuta();
            }else
            {
                ArrayList<String> archivos = fileControlador.listarArchivos(ruta);
                if(archivos.isEmpty())
                    JOptionPane.showMessageDialog(this, "No se encontro ningun archivo","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                else if(archivos==null)
                    JOptionPane.showMessageDialog(this, "Excepcion (java.lang.NullPointerException)","Alerta",JOptionPane.ERROR_MESSAGE);
                else
                {      
                    modelo.removeAllElements();
                    for(int i = 0;i<archivos.size();i++)
                    {
                        modelo.addElement(archivos.get(i));
                    }                    
                }          

            }
        }        
    }//GEN-LAST:event_btnListarArchivosActionPerformed

    private void btnListarDirectioriosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirectioriosOcultosActionPerformed
        if (txtRuta.getText().isBlank())
        {
            JOptionPane.showMessageDialog(this, "No ha ingresado una ruta","Alerta",JOptionPane.WARNING_MESSAGE);
        }else
        {
            limpiarInformacion();
            String ruta = txtRuta.getText();
            if(fileControlador.listarArchivosOcultos(ruta)==null)
            {
                JOptionPane.showMessageDialog(this, "No se ha ingresado una ruta valida","Alerta",JOptionPane.WARNING_MESSAGE);
                limpiarRuta();
            }else
            {
                ArrayList<String> directoriosO = fileControlador.listarDirectoriosOcultos(ruta);
                if(directoriosO.isEmpty())
                    JOptionPane.showMessageDialog(this, "No se encontro ningun directorio oculto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                else if(directoriosO==null)
                    JOptionPane.showMessageDialog(this, "Excepcion (java.lang.NullPointerException)","Alerta",JOptionPane.ERROR_MESSAGE);
                else
                {         
                    modelo.removeAllElements();
                    for(int i = 0;i<directoriosO.size();i++)
                    {
                        modelo.addElement(directoriosO.get(i));
                    }
                }       

            }
        }
    }//GEN-LAST:event_btnListarDirectioriosOcultosActionPerformed

    private void btnListarArchivosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosOcultosActionPerformed
        if (txtRuta.getText().isBlank())
        {
            JOptionPane.showMessageDialog(this, "No ha ingresado una ruta","Alerta",JOptionPane.WARNING_MESSAGE);
        }else
        {
            limpiarInformacion();
            String ruta = txtRuta.getText();
            if(fileControlador.listarArchivosOcultos(ruta)==null)
            {
                JOptionPane.showMessageDialog(this, "No se ha ingresado una ruta valida","Alerta",JOptionPane.WARNING_MESSAGE);
                limpiarRuta();
            }else
            {
                ArrayList<String> archivosO = fileControlador.listarArchivosOcultos(ruta);
                if(archivosO.isEmpty())
                    JOptionPane.showMessageDialog(this, "No se encontro ningun archivo oculto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                else if(archivosO==null)
                    JOptionPane.showMessageDialog(this, "Excepcion (java.lang.NullPointerException)","Alerta",JOptionPane.ERROR_MESSAGE);
                else
                {   
                    modelo.removeAllElements();
                    for(int i = 0;i<archivosO.size();i++)
                    {
                        modelo.addElement(archivosO.get(i));
                    }                    
                }             

            }
        }    
    }//GEN-LAST:event_btnListarArchivosOcultosActionPerformed

    private void opcionMenuCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionMenuCrearActionPerformed
        if (txtRuta.getText().isBlank())
        {
            JOptionPane.showMessageDialog(this, "No ha ingresado una ruta","Alerta",JOptionPane.WARNING_MESSAGE);
        }else
        {
            String ruta = txtRuta.getText();
            String [] eleccion = {"Archivo","Directorio"};
            String seleccion = (String) JOptionPane.showInputDialog(this,"Seleccione una opcion","Tipo de Elemento",JOptionPane.PLAIN_MESSAGE
                    ,establecerIcono("/imagenes/iconoSeleccion.png",60,60),eleccion,eleccion[0]);
            if(seleccion!=null)
            {
                if(seleccion.equalsIgnoreCase("Archivo"))
                {
                    String nombreArchivo =JOptionPane.showInputDialog(this, new JLabel("Ingrese el nombre (con su extension)",
                            establecerIcono("/imagenes/iconoIngreso.png",60,60),JLabel.CENTER),"Archivo",JOptionPane.PLAIN_MESSAGE);
                    if(nombreArchivo==null || nombreArchivo.length()==0)
                    {
                        JOptionPane.showMessageDialog(this, "No ha ingresado un nombre","Alerta",JOptionPane.WARNING_MESSAGE);
                    }
                    else
                    {
                        ruta = ruta+"/"+nombreArchivo;
                        if(fileControlador.crearArchivo(ruta))
                        {
                            fileControlador.crearArchivo(ruta);
                            btnListarArchivosActionPerformed(evt);  
                            JOptionPane.showMessageDialog(this, "Archivo creado con exito!","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                        }else
                        {
                        JOptionPane.showMessageDialog(this, "El archivo no se ha creado con exito","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                        }    
                    }
                }else if(seleccion.equalsIgnoreCase("Directorio"))
                {
                    String nombreDirectorio = JOptionPane.showInputDialog(this, new JLabel("Ingrese el nombre",
                        establecerIcono("/imagenes/iconoIngreso.png",60,60),JLabel.CENTER),"Directorio",JOptionPane.PLAIN_MESSAGE);
                    if(nombreDirectorio==null || nombreDirectorio.length()==0)
                    {
                        JOptionPane.showMessageDialog(this, "No ha ingresado un nombre","Alerta",JOptionPane.WARNING_MESSAGE);
                    }else
                    {
                        ruta = ruta+"/"+nombreDirectorio;
                        if(fileControlador.crearDirectorio(ruta))
                        {
                            fileControlador.crearDirectorio(ruta);
                            BtnListarDirectoriosActionPerformed(evt);
                            JOptionPane.showMessageDialog(this, "Directorio creado con exito!","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                        }else
                        {
                            JOptionPane.showMessageDialog(this, "El directorio no se ha creado con exito","Mensaje",JOptionPane.WARNING_MESSAGE);
                        }                    
                    }
                }            
            }else
            {
                JOptionPane.showMessageDialog(this, "No ha seleccionado una opcion","Alerta",JOptionPane.WARNING_MESSAGE);
            } 
        }
    }//GEN-LAST:event_opcionMenuCrearActionPerformed

    private void opcionMenuRenombrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionMenuRenombrarActionPerformed
        if (listaDatos.getSelectedValue()!=null)
        {
            String ruta = txtRuta.getText();
            String rutaArchivoViejo = ruta+"/"+listaDatos.getSelectedValue();
            File archivoViejo = new File(rutaArchivoViejo);
            String nombreNuevo = JOptionPane.showInputDialog(this, new JLabel("Ingrese el nuevo nombre",
                establecerIcono("/imagenes/iconoIngreso.png",60,60),JLabel.CENTER),"Directorio",JOptionPane.PLAIN_MESSAGE);  
            if(nombreNuevo==null || nombreNuevo.length()==0)
            {
                JOptionPane.showMessageDialog(this, "No ha ingresado un nombre","Alerta",JOptionPane.WARNING_MESSAGE);
            }else
            {
                String rutaArchivoNuevo = ruta+"/"+nombreNuevo;
                File archivoNuevo = new File(rutaArchivoNuevo);
                if(fileControlador.renombrarElemento(archivoViejo, archivoNuevo))
                {
                    fileControlador.renombrarElemento(archivoViejo, archivoNuevo);
                    if(archivoNuevo.isFile() && archivoNuevo.isHidden())
                        btnListarArchivosOcultosActionPerformed(evt);
                    else if(archivoNuevo.isFile())
                        btnListarArchivosActionPerformed(evt);
                    else if(archivoNuevo.isDirectory() && archivoNuevo.isHidden())
                        btnListarDirectioriosOcultosActionPerformed(evt);
                    else if(archivoNuevo.isDirectory())
                        BtnListarDirectoriosActionPerformed(evt);
                    JOptionPane.showMessageDialog(this, "Elemento renombrado con exito!","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                }else
                {
                    JOptionPane.showMessageDialog(this, "El elemento no se ha renombrado con exito","Mensaje",JOptionPane.WARNING_MESSAGE);
                }
            }
        }else
        {
            JOptionPane.showMessageDialog(this, "No ha seleccionado ningun elemento","Alerta",JOptionPane.WARNING_MESSAGE);    
        }
       
    
    
    }//GEN-LAST:event_opcionMenuRenombrarActionPerformed

    private void opcionMenuEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionMenuEliminarActionPerformed
        if (listaDatos.getSelectedValue()!=null)
        {
            String ruta = txtRuta.getText();
            ruta = ruta +"/"+listaDatos.getSelectedValue();
            File elemento = new File(ruta);
            int i = 0;
            boolean archivo = false;
            if(elemento.isDirectory())
                i = JOptionPane.showConfirmDialog(this, "¿Esta seguro que desea eliminar la carpeta?");
            else
                i = JOptionPane.showConfirmDialog(this, "¿Esta seguro que desea eliminar el archivo?");
            
            if(i==0)
            {
                if(elemento.isFile())
                {
                    boolean bandera1 = false;
                    boolean bandera2 = false;
                    boolean bandera3 = false;
                    boolean bandera4 = false;   
                    if(elemento.isFile() && elemento.isHidden())
                        bandera1 = true;
                    else if(elemento.isFile())
                        bandera2 = true;
                    else if(elemento.isDirectory() && elemento.isHidden())
                        bandera3 = true;
                    else if(elemento.isDirectory())
                        bandera4 = true;                     
                    fileControlador.eliminarArchivo(elemento);
                    if(bandera1)
                        btnListarArchivosOcultosActionPerformed(evt);
                    else if(bandera2)
                        btnListarArchivosActionPerformed(evt);
                    else if(bandera3)
                        btnListarDirectioriosOcultosActionPerformed(evt);
                    else if(bandera4)
                        BtnListarDirectoriosActionPerformed(evt);                    
                    JOptionPane.showMessageDialog(this, "Elemento eliminado con exito!","Alerta",JOptionPane.INFORMATION_MESSAGE);   
                }else if(elemento.isDirectory())
                {
                    boolean bandera1 = false;
                    boolean bandera2 = false;
                    boolean bandera3 = false;
                    boolean bandera4 = false;           
                    if(elemento.isFile() && elemento.isHidden())
                        bandera1 = true;
                    else if(elemento.isFile())
                        bandera2 = true;
                    else if(elemento.isDirectory() && elemento.isHidden())
                        bandera3 = true;
                    else if(elemento.isDirectory())
                        bandera4 = true;   
                    if(fileControlador.eliminarElemento(elemento))
                    {
                        fileControlador.eliminarElemento(elemento);
                        if(bandera1)
                            btnListarArchivosOcultosActionPerformed(evt);
                        else if(bandera2)
                            btnListarArchivosActionPerformed(evt);
                        else if(bandera3)
                            btnListarDirectioriosOcultosActionPerformed(evt);
                        else if(bandera4)
                            BtnListarDirectoriosActionPerformed(evt);     
                        JOptionPane.showMessageDialog(this, "Elemento eliminado con exito!","Alerta",JOptionPane.INFORMATION_MESSAGE);
                    }else 
                        {
                            JOptionPane.showMessageDialog(this,"El elemento no se ha eliminado con exito");
                        }                  
                }
            }else if(i==1)
            {
                JOptionPane.showMessageDialog(this, "El elemento no se ha eliminado con exito","Mensaje",JOptionPane.WARNING_MESSAGE);
            }
            
        }else
        {
            JOptionPane.showMessageDialog(this, "No ha seleccionado ningun elemento","Alerta",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_opcionMenuEliminarActionPerformed

    public void limpiarRuta()
    {
        txtRuta.setText("");
    }
    
    public void limpiarInformacion()
    {
        txtAreaInformacion.setText("");
    }
    
    public Icon establecerIcono(String ruta,int ancho,int alto)
    {
        Icon imagen = new ImageIcon(new ImageIcon(getClass().getResource(ruta)).getImage()
                .getScaledInstance(alto, ancho, java.awt.Image.SCALE_SMOOTH));
        return imagen;
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnListarDirectorios;
    private javax.swing.JButton btnListarArchivos;
    private javax.swing.JButton btnListarArchivosOcultos;
    private javax.swing.JButton btnListarDirectioriosOcultos;
    private javax.swing.JButton btnMostrarInformacion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblRuta;
    private javax.swing.JList<String> listaDatos;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuGestor;
    private javax.swing.JMenuItem opcionMenuCrear;
    private javax.swing.JMenuItem opcionMenuEliminar;
    private javax.swing.JMenuItem opcionMenuRenombrar;
    private javax.swing.JMenuItem opcionMenuSalir;
    private javax.swing.JTextArea txtAreaInformacion;
    private javax.swing.JTextField txtRuta;
    // End of variables declaration//GEN-END:variables

}
